package com.mycompany.cs321.project;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.concurrent.TimeUnit;

/**
 * Main trading dashboard menu where the business logic is executed. 
 * @author Connor Stewart
 */
public class DashboardMenu extends javax.swing.JFrame {
    private Account currentUser;
    private CurrencyInfo currentCurrency;
    
    /**
     * Creates new form DashboardMenu
     */
    public DashboardMenu() {
        
        initComponents();
    }
    
    /**
     * Creates new form DashboardMenu.
     * @param user that has logged in successfully
     */
    public DashboardMenu(Account user) {
        currentUser = user;
        try {
            currentUser.loadAccountInfo();
        } catch (IOException ex) {
            Logger.getLogger(DashboardMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        updateAccountInfo();
        // Update price
        ScheduledExecutorService exec = Executors.newSingleThreadScheduledExecutor();
        exec.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                update();
            }
        } , 0, 5, TimeUnit.SECONDS);
    }
    
    /**
     * Update the account info from the file to the GUI display.
     */
    private void updateAccountInfo() {
        // Show who is logged in
        userLabel.setText(currentUser.getUsername());
        // Format balance display labels with 8 decimal places
        DecimalFormat df = new DecimalFormat("0.0000000");
        usdBalanceLabel.setText("USD: " + df.format(currentUser.getBalanceUSD()));
        btcBalanceLabel.setText("BTC: " + df.format(currentUser.getBalanceBTC()));
        ethBalanceLabel.setText("ETH: " + df.format(currentUser.getBalanceETH()));
        // Add orders to screen
        ordersTextArea.setText("");
        for (Order o : currentUser.getOrderArray()) {
            ordersTextArea.append(o.printOrder() + "\n");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderTypeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        usdBalanceLabel = new javax.swing.JLabel();
        btcBalanceLabel = new javax.swing.JLabel();
        ethBalanceLabel = new javax.swing.JLabel();
        balanceLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        orderLabel = new javax.swing.JLabel();
        pairTitleLabel = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        quantityTitleLabel = new javax.swing.JLabel();
        orderButton = new javax.swing.JButton();
        selectedPairTitleLabel = new javax.swing.JLabel();
        quantityUSDLabel = new javax.swing.JLabel();
        selectCryptoComboBox = new javax.swing.JComboBox<>();
        sellRadioButton = new javax.swing.JRadioButton();
        buyRadioButton = new javax.swing.JRadioButton();
        selectCryptoLabel = new javax.swing.JLabel();
        orderStatusTitleLabel = new javax.swing.JLabel();
        orderStatusLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        ordersListPanel = new javax.swing.JPanel();
        ordersTitleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        userLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dashboard");

        usdBalanceLabel.setText("USD:");

        btcBalanceLabel.setText("BTC:");

        ethBalanceLabel.setText("ETH: ");

        balanceLabel1.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        balanceLabel1.setText("Balances:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usdBalanceLabel)
                    .addComponent(btcBalanceLabel)
                    .addComponent(ethBalanceLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(balanceLabel1)
                .addGap(0, 98, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(balanceLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(usdBalanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btcBalanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ethBalanceLabel)
                .addGap(100, 100, 100))
        );

        orderLabel.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        orderLabel.setText("Order:");

        pairTitleLabel.setText("Pair:");

        quantityTitleLabel.setText("Quantity:");

        orderButton.setText("Place Order");
        orderButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderButtonMouseClicked(evt);
            }
        });

        selectedPairTitleLabel.setText("Price:");

        selectCryptoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "BTC-USD", "ETH-USD", "BTC-ETH" }));
        selectCryptoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCryptoComboBoxActionPerformed(evt);
            }
        });

        orderTypeGroup.add(sellRadioButton);
        sellRadioButton.setText("Sell");

        orderTypeGroup.add(buyRadioButton);
        buyRadioButton.setSelected(true);
        buyRadioButton.setText("Buy");

        orderStatusTitleLabel.setText("Status: ");

        updateButton.setText("Update");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderLabel)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pairTitleLabel)
                                            .addComponent(selectedPairTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(selectCryptoLabel)
                                            .addComponent(selectCryptoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(buyRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sellRadioButton))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(quantityTitleLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(orderStatusTitleLabel)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(orderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quantityUSDLabel)
                                        .addGap(70, 70, 70)))))
                        .addGap(1, 1, 1)
                        .addComponent(updateButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(orderStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(orderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyRadioButton)
                    .addComponent(sellRadioButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pairTitleLabel)
                    .addComponent(selectCryptoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedPairTitleLabel)
                    .addComponent(selectCryptoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityTitleLabel)
                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantityUSDLabel)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(orderButton)
                        .addComponent(updateButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderStatusTitleLabel)
                .addGap(1, 1, 1)
                .addComponent(orderStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        ordersTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        ordersTitleLabel.setText("Order History:");

        ordersTextArea.setEditable(false);
        ordersTextArea.setColumns(20);
        ordersTextArea.setRows(5);
        jScrollPane1.setViewportView(ordersTextArea);

        javax.swing.GroupLayout ordersListPanelLayout = new javax.swing.GroupLayout(ordersListPanel);
        ordersListPanel.setLayout(ordersListPanelLayout);
        ordersListPanelLayout.setHorizontalGroup(
            ordersListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersListPanelLayout.createSequentialGroup()
                .addComponent(ordersTitleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ordersListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addContainerGap())
        );
        ordersListPanelLayout.setVerticalGroup(
            ordersListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersListPanelLayout.createSequentialGroup()
                .addComponent(ordersTitleLabel)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        userLabel.setText("name");

        logoutButton.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        logoutButton.setText("Logout");
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutButton)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(userLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(logoutButton)
                .addGap(5, 5, 5)
                .addComponent(userLabel)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ordersListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ordersListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the currentCurrency to the cryptocurrency selected, displays the price
     * in the price label. 
     * @param evt ActionEvent from selecting a cryptocurrency.
     */
    private void selectCryptoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCryptoComboBoxActionPerformed
        int selection = selectCryptoComboBox.getSelectedIndex();
        switch (selection) {
            case 0: // None
                // Dont show anything until cryptocurrency is selected
                currentCurrency = null;
                this.selectCryptoLabel.setText("");
                break;
            case 1: {
                try {
                    // BTC-USD
                    currentCurrency = new CurrencyInfo(selection);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                this.selectCryptoLabel.setText("$" + String.format("%.8f", new BigDecimal(currentCurrency.getPrice())));
                break;

            case 2: {
                try {
                    // ETH-USD
                    currentCurrency = new CurrencyInfo(selection);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                this.selectCryptoLabel.setText("$" + String.format("%.8f", new BigDecimal(currentCurrency.getPrice())));
                break;

            case 3: {
                try {
                    // BTC-ETH
                    currentCurrency = new CurrencyInfo(selection);
                } catch (IOException ex) {
                    Logger.getLogger(DashboardMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                this.selectCryptoLabel.setText("$" + String.format("%.8f", new BigDecimal(currentCurrency.getPrice())));
                break;

        }   
    }//GEN-LAST:event_selectCryptoComboBoxActionPerformed
    
    /**
     * Closes the dashboard and returns to the login menu.
     * @param evt MouseEvent from logout button being clicked.
     */
    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        this.setVisible(false);
        // TODO: Fix not making a new form, instead reopen the old one.
        LoginMenu log = new LoginMenu();
        log.setVisible(true);
    }//GEN-LAST:event_logoutButtonMouseClicked
    
    /**
     * Checks the order selection fields including if a currency is selected,
     * if the quantity is a valid decimal, and if the user has enough balance
     * to cover the order. Updates the status label describing what needs fixed.
     * @return true if all conditions are valid, false if any condition is not met.
     */
    private boolean checkOrder() {
        // If trading pair is not selected
        if (!(selectCryptoComboBox.getSelectedIndex() > 0)) {
            orderStatusLabel.setText("Select trading pair");
            return false;
        }
        // If quantity is not a float
        if (!quantityTextField.getText().matches("[+]?([0-9]*[.])?[0-9]+")) {
            orderStatusLabel.setText("Invalid quantity");
            return false;
        }
        // Check if user has enough balance to cover order
        if (buyRadioButton.isSelected()) {
            Order o = new Order("Buy", currentCurrency, Double.parseDouble(quantityTextField.getText()));
            if (!currentUser.checkBalance(o)) {
                orderStatusLabel.setText("Not enough balance to buy");
                return false;
            }
        } else if (sellRadioButton.isSelected()){
            Order o = new Order("Sell", currentCurrency, Double.parseDouble(quantityTextField.getText())); 
            if (!currentUser.checkBalance(o)) {
                orderStatusLabel.setText("Not enough balance to sell");
                return false;
            }
        }
        // If no invalid contitions met, order will be placed
        orderStatusLabel.setText("Valid order");
        return true;
    }
    
    /**
     * Executes complete process of an order. First checks if the order is 
     * valid, then adds the order to the user, then executes the order with the balance
     * changes. Finally saves the order to the account file and then reloads
     * the GUI with the updated information. 
     * @param evt MouseEvent from order button being clicked. 
     */
    private void orderButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderButtonMouseClicked
        // Check if order is valid
        if (checkOrder()) {
            // Differentiate between buy and sell orders. First add order to account, the execute it.
            if (buyRadioButton.isSelected()) {
                Order o = new Order("Buy", currentCurrency, Double.parseDouble(quantityTextField.getText()));
                currentUser.addOrder(o);
                currentUser.execOrder(o);
            } else if (sellRadioButton.isSelected()){
                Order o = new Order("Sell", currentCurrency, Double.parseDouble(quantityTextField.getText())); 
                currentUser.addOrder(o);
                currentUser.execOrder(o);
            }
            // Save order and balance changes to file.
            try {
                currentUser.saveAccountInfo();
            } catch (IOException ex) {
                Logger.getLogger(DashboardMenu.class.getName()).log(Level.SEVERE, null, ex);
                orderStatusLabel.setText("Problem saving orders.");
            }
            // Reload users orders and balances from file.
            try {
                currentUser.loadAccountInfo();
            } catch (IOException ex) {
                Logger.getLogger(DashboardMenu.class.getName()).log(Level.SEVERE, null, ex);
                orderStatusLabel.setText("Problem loading saved orders.");
            }
            // Update GUI with new account information. 
            updateAccountInfo();        
        }
    }//GEN-LAST:event_orderButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        update();
    }//GEN-LAST:event_updateButtonMouseClicked
    
    public void update() {
        java.awt.event.ActionEvent updateEvent = new java.awt.event.ActionEvent(this, 0, "");
        selectCryptoComboBoxActionPerformed(updateEvent);        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel balanceLabel1;
    private javax.swing.JLabel btcBalanceLabel;
    private javax.swing.JRadioButton buyRadioButton;
    private javax.swing.JLabel ethBalanceLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton orderButton;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JLabel orderStatusLabel;
    private javax.swing.JLabel orderStatusTitleLabel;
    private javax.swing.ButtonGroup orderTypeGroup;
    private javax.swing.JPanel ordersListPanel;
    private javax.swing.JTextArea ordersTextArea;
    private javax.swing.JLabel ordersTitleLabel;
    private javax.swing.JLabel pairTitleLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JLabel quantityTitleLabel;
    private javax.swing.JLabel quantityUSDLabel;
    private javax.swing.JComboBox<String> selectCryptoComboBox;
    private javax.swing.JLabel selectCryptoLabel;
    private javax.swing.JLabel selectedPairTitleLabel;
    private javax.swing.JRadioButton sellRadioButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel usdBalanceLabel;
    public javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables
}
